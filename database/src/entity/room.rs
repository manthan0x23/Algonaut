//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::RoomScopeTypeEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

pub const PAGE_SIZE: u64 = 8;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "room")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub alias: String,
    pub objective: String,
    pub capacity: i32,
    pub editors_scope_type: RoomScopeTypeEnum,
    pub code: Option<String>,
    pub code_language: Option<String>,
    pub allowed_viewers: Vec<String>,
    pub viewers_scope_type: RoomScopeTypeEnum,
    pub allowed_editors: Vec<String>,
    pub created_by: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chat::Entity")]
    Chat,
    #[sea_orm(has_many = "super::execution::Entity")]
    Execution,
    #[sea_orm(has_many = "super::tarsy_interactions::Entity")]
    TarsyInteractions,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedBy",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(has_many = "super::user_room::Entity")]
    UserRoom,
}

impl Related<super::chat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chat.def()
    }
}

impl Related<super::execution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Execution.def()
    }
}

impl Related<super::tarsy_interactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TarsyInteractions.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoom.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
